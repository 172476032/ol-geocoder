{
  "name": "ol3-geocoder",
  "tagline": "A geocoder extension for OpenLayers 3.",
  "body": "# OpenLayers 3 Control Geocoder\r\n\r\nA geocoder extension for [OpenLayers 3](http://openlayers.org/). **Requires** OpenLayers **v3.11.0** or higher.\r\n\r\n![geocoder anim](https://raw.githubusercontent.com/jonataswalker/ol3-geocoder/screenshots/images/anim.gif)\r\n\r\n## Demo\r\nYou can see [here a demo](http://rawgit.com/jonataswalker/ol3-geocoder/master/examples/control-nominatim.html) or on [jsFiddle](http://jsfiddle.net/jonataswalker/c4qv9afb/) if you prefer.\r\n\r\n## Providers\r\nThe plugin supports (for now) the following providers:\r\n\r\n* [OSM](http://www.openstreetmap.org/)/[Nominatim](http://wiki.openstreetmap.org/wiki/Nominatim) &mdash; `'osm'`.\r\n* [MapQuest Geocoding API](http://open.mapquestapi.com/nominatim/) - requires KEY  &mdash; `'mapquest'`.\r\n* [Google Maps Geocoding API](https://developers.google.com/maps/documentation/geocoding/intro) - requires KEY  &mdash; `'google'`. See [#16](https://github.com/jonataswalker/ol3-geocoder/issues/16).\r\n* [Photon](http://photon.komoot.de/)  &mdash; `'photon'`.\r\n* [Mapzen Search/Pelias](https://mapzen.com/projects/search) - requires KEY  &mdash; `'pelias'`.\r\n\r\n## How to use it?\r\n##### CDN Hosted - [jsDelivr](http://www.jsdelivr.com/projects/openlayers.geocoder)\r\nLoad CSS and Javascript:\r\n```HTML\r\n<link href=\"//cdn.jsdelivr.net/openlayers.geocoder/latest/ol3-geocoder.min.css\" rel=\"stylesheet\">\r\n<script src=\"//cdn.jsdelivr.net/openlayers.geocoder/latest/ol3-geocoder.js\"></script>\r\n```\r\n##### Self hosted\r\nDownload [latest release](https://github.com/jonataswalker/ol3-geocoder/releases/latest) and (obviously) load CSS and Javascript.\r\n\r\n##### Instantiate with some options and add the Control\r\n```javascript\r\nvar geocoder = new Geocoder('nominatim', {\r\n  provider: 'mapquest',\r\n  key: '__some_key__',\r\n  lang: 'pt-BR', //en-US, fr-FR\r\n  placeholder: 'Search for ...',\r\n  limit: 5,\r\n  keepOpen: true\r\n});\r\nmap.addControl(geocoder);\r\n```\r\n\r\n##### Listen and do something when an address is chosen\r\n```javascript\r\ngeocoder.on('addresschosen', function(evt){\r\n  var feature = evt.feature,\r\n      coord = evt.coordinate,\r\n      address_html = feature.get('address_html');\r\n  content.innerHTML = '<p>'+address_html+'</p>';\r\n  overlay.setPosition(coord);\r\n});\r\n```\r\n\r\n# API\r\n\r\n## Constructor\r\n\r\n#### `new Geocoder(control_type, options)`\r\n\r\n###### `control_type` `{String}`\r\nMaybe later we will have other types like `'reverse'`. So for now just pass `'nominatim'`.\r\n\r\n###### `options` is an object with the following possible properties:\r\n* `provider`    : `'osm'` (default), `'mapquest'`, `'google'`, `'photon'`, `'pelias'`; Your preferable provider;\r\n* `key`         : `''`; API Key if required;\r\n* `placeholder` : `'Search for an address'`; Placeholder for text input;\r\n* `featureStyle`: `ol.style.Style`; Feature style;\r\n* `lang`        : `'en-US'`; Preferable language;\r\n* `limit`       : `5`; Limit of results;\r\n* `countrycodes`: `''`; Only valid for `osm` and `mapquest`; Limit search results to a specific country (or a list of countries). This is an [ISO 3166-1alpha2 code] (https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2), e.g. `gb` for the United Kingdom, `br` for Brazil, etc;\r\n* `keepOpen`    : `false`; Whether the results keep openned;\r\n* `debug`       : `false`; If true logs provider's response;\r\n\r\n## Methods\r\n\r\n#### `geocoder.getLayer()`\r\nReturns the layer `{ol.layer.Vector}` created by Geocoder control.\r\n\r\n#### `geocoder.getSource()`\r\nReturns the source `{ol.source.Vector}` created by Geocoder control.\r\n\r\n## Events\r\n\r\n##### Triggered when an address is chosen\r\n```javascript\r\ngeocoder.on('addresschosen', function(evt){\r\n  // it's up to you\r\n  console.info(evt);\r\n});\r\n```\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}